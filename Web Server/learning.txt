package main

import (
	"context"
	"errors"
	"fmt"
	"io"
	"net"
	"net/http"
)

// for both functions we accept two arguments http.ResponseWriter and a *http.Request value.
//
// the *http.Request is used to get information about the request being sent, such as the body being sent in the POST request or info about client

const keyServerAddr = "serverAddr"

func getRoot(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	fmt.Printf("%s: got / request \n ", ctx.Value(keyServerAddr))
	io.WriteString(w, "Velcome to my website")
}

func sayHello(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	fmt.Printf("%s: got / got hello request \n ", ctx.Value(keyServerAddr))
	io.WriteString(w, "hello gang")
}

func main() {

	// http.HandleFunc("/", getRoot)
	// http.HandleFunc("/hello", sayHello)

	// err := http.ListenAndServe(":8080", nil)

	// if errors.Is(err, http.ErrServerClosed) {
	// 	fmt.Printf("server closed \n")
	// } else if err != nil {
	// 	fmt.Printf("Error starting server with port :8080", err)
	// 	os.Exit(1)
	// }

	// introducing a MULTIPLEXER

	mux := http.NewServeMux()
	mux.HandleFunc("/", getRoot)
	mux.HandleFunc("/hello", sayHello)

	ctx, cancelCtx := context.WithCancel(context.Background())
	serverOne := &http.Server{
		Addr:    ":8080",
		Handler: mux,
		BaseContext: func(l net.Listener) context.Context {
			ctx = context.WithValue(ctx, keyServerAddr, l.Addr().String())
			return ctx
		},
	}

	go func() {
		err := serverOne.ListenAndServe()

		if errors.Is(err, http.ErrServerClosed) {
			fmt.Printf("server closed \n")
		} else if err != nil {
			fmt.Printf("Error starting server with port :8080", err)

		}
		cancelCtx()
	}()

	<-ctx.Done()

}
